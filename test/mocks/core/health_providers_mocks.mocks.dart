// Mocks generated by Mockito 5.3.2 from annotations
// in calorie_diff/test/mocks/core/health_providers_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:health/health.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HealthFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockHealthProvider extends _i1.Mock implements _i2.HealthFactory {
  @override
  bool isDataTypeAvailable(_i2.HealthDataType? dataType) => (super.noSuchMethod(
        Invocation.method(
          #isDataTypeAvailable,
          [dataType],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.Future<bool> requestAuthorization(
    List<_i2.HealthDataType>? types, {
    List<_i2.HealthDataAccess>? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestAuthorization,
          [types],
          {#permissions: permissions},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> writeHealthData(
    double? value,
    _i2.HealthDataType? type,
    DateTime? startTime,
    DateTime? endTime, {
    _i2.HealthDataUnit? unit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeHealthData,
          [
            value,
            type,
            startTime,
            endTime,
          ],
          {#unit: unit},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> writeAudiogram(
    List<double>? frequencies,
    List<double>? leftEarSensitivities,
    List<double>? rightEarSensitivities,
    DateTime? startTime,
    DateTime? endTime, {
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAudiogram,
          [
            frequencies,
            leftEarSensitivities,
            rightEarSensitivities,
            startTime,
            endTime,
          ],
          {#metadata: metadata},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i2.HealthDataPoint>> getHealthDataFromTypes(
    DateTime? startTime,
    DateTime? endTime,
    List<_i2.HealthDataType>? types,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthDataFromTypes,
          [
            startTime,
            endTime,
            types,
          ],
        ),
        returnValue: _i3.Future<List<_i2.HealthDataPoint>>.value(
            <_i2.HealthDataPoint>[]),
        returnValueForMissingStub: _i3.Future<List<_i2.HealthDataPoint>>.value(
            <_i2.HealthDataPoint>[]),
      ) as _i3.Future<List<_i2.HealthDataPoint>>);
  @override
  _i3.Future<int?> getTotalStepsInInterval(
    DateTime? startTime,
    DateTime? endTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalStepsInInterval,
          [
            startTime,
            endTime,
          ],
        ),
        returnValue: _i3.Future<int?>.value(),
        returnValueForMissingStub: _i3.Future<int?>.value(),
      ) as _i3.Future<int?>);
  @override
  _i3.Future<bool> writeWorkoutData(
    _i2.HealthWorkoutActivityType? activityType,
    DateTime? start,
    DateTime? end, {
    int? totalEnergyBurned,
    _i2.HealthDataUnit? totalEnergyBurnedUnit = _i2.HealthDataUnit.KILOCALORIE,
    int? totalDistance,
    _i2.HealthDataUnit? totalDistanceUnit = _i2.HealthDataUnit.METER,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeWorkoutData,
          [
            activityType,
            start,
            end,
          ],
          {
            #totalEnergyBurned: totalEnergyBurned,
            #totalEnergyBurnedUnit: totalEnergyBurnedUnit,
            #totalDistance: totalDistance,
            #totalDistanceUnit: totalDistanceUnit,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
