// Mocks generated by Mockito 5.4.4 from annotations
// in calorie_diff/test/mocks/core/health_providers_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:health/health.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Health].
///
/// See the documentation for Mockito's code generation for more information.
class MockHealthProvider extends _i1.Mock implements _i2.Health {
  @override
  _i2.HealthPlatformType get platformType => (super.noSuchMethod(
        Invocation.getter(#platformType),
        returnValue: _i2.HealthPlatformType.appleHealth,
        returnValueForMissingStub: _i2.HealthPlatformType.appleHealth,
      ) as _i2.HealthPlatformType);
  @override
  String get deviceId => (super.noSuchMethod(
        Invocation.getter(#deviceId),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#deviceId),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#deviceId),
        ),
      ) as String);
  @override
  bool get useHealthConnectIfAvailable => (super.noSuchMethod(
        Invocation.getter(#useHealthConnectIfAvailable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<void> configure({bool? useHealthConnectIfAvailable = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #configure,
          [],
          {#useHealthConnectIfAvailable: useHealthConnectIfAvailable},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  bool isDataTypeAvailable(_i2.HealthDataType? dataType) => (super.noSuchMethod(
        Invocation.method(
          #isDataTypeAvailable,
          [dataType],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<bool?> hasPermissions(
    List<_i2.HealthDataType>? types, {
    List<_i2.HealthDataAccess>? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasPermissions,
          [types],
          {#permissions: permissions},
        ),
        returnValue: _i4.Future<bool?>.value(),
        returnValueForMissingStub: _i4.Future<bool?>.value(),
      ) as _i4.Future<bool?>);
  @override
  _i4.Future<void> revokePermissions() => (super.noSuchMethod(
        Invocation.method(
          #revokePermissions,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.HealthConnectSdkStatus?> getHealthConnectSdkStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthConnectSdkStatus,
          [],
        ),
        returnValue: _i4.Future<_i2.HealthConnectSdkStatus?>.value(),
        returnValueForMissingStub:
            _i4.Future<_i2.HealthConnectSdkStatus?>.value(),
      ) as _i4.Future<_i2.HealthConnectSdkStatus?>);
  @override
  _i4.Future<void> installHealthConnect() => (super.noSuchMethod(
        Invocation.method(
          #installHealthConnect,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool?> disconnect(
    List<_i2.HealthDataType>? types, {
    List<_i2.HealthDataAccess>? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [types],
          {#permissions: permissions},
        ),
        returnValue: _i4.Future<bool?>.value(),
        returnValueForMissingStub: _i4.Future<bool?>.value(),
      ) as _i4.Future<bool?>);
  @override
  _i4.Future<bool> requestAuthorization(
    List<_i2.HealthDataType>? types, {
    List<_i2.HealthDataAccess>? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestAuthorization,
          [types],
          {#permissions: permissions},
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> writeHealthData({
    required double? value,
    _i2.HealthDataUnit? unit,
    required _i2.HealthDataType? type,
    required DateTime? startTime,
    DateTime? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeHealthData,
          [],
          {
            #value: value,
            #unit: unit,
            #type: type,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> delete({
    required _i2.HealthDataType? type,
    required DateTime? startTime,
    DateTime? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #type: type,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> writeBloodPressure({
    required int? systolic,
    required int? diastolic,
    required DateTime? startTime,
    DateTime? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeBloodPressure,
          [],
          {
            #systolic: systolic,
            #diastolic: diastolic,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> writeBloodOxygen({
    required double? saturation,
    double? flowRate = 0.0,
    required DateTime? startTime,
    DateTime? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeBloodOxygen,
          [],
          {
            #saturation: saturation,
            #flowRate: flowRate,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> writeMeal({
    required _i2.MealType? mealType,
    required DateTime? startTime,
    required DateTime? endTime,
    double? caloriesConsumed,
    double? carbohydrates,
    double? protein,
    double? fatTotal,
    String? name,
    double? caffeine,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeMeal,
          [],
          {
            #mealType: mealType,
            #startTime: startTime,
            #endTime: endTime,
            #caloriesConsumed: caloriesConsumed,
            #carbohydrates: carbohydrates,
            #protein: protein,
            #fatTotal: fatTotal,
            #name: name,
            #caffeine: caffeine,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> writeAudiogram({
    required List<double>? frequencies,
    required List<double>? leftEarSensitivities,
    required List<double>? rightEarSensitivities,
    required DateTime? startTime,
    DateTime? endTime,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAudiogram,
          [],
          {
            #frequencies: frequencies,
            #leftEarSensitivities: leftEarSensitivities,
            #rightEarSensitivities: rightEarSensitivities,
            #startTime: startTime,
            #endTime: endTime,
            #metadata: metadata,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i2.HealthDataPoint>> getHealthDataFromTypes({
    required List<_i2.HealthDataType>? types,
    required DateTime? startTime,
    required DateTime? endTime,
    bool? includeManualEntry = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthDataFromTypes,
          [],
          {
            #types: types,
            #startTime: startTime,
            #endTime: endTime,
            #includeManualEntry: includeManualEntry,
          },
        ),
        returnValue: _i4.Future<List<_i2.HealthDataPoint>>.value(
            <_i2.HealthDataPoint>[]),
        returnValueForMissingStub: _i4.Future<List<_i2.HealthDataPoint>>.value(
            <_i2.HealthDataPoint>[]),
      ) as _i4.Future<List<_i2.HealthDataPoint>>);
  @override
  _i4.Future<List<_i2.HealthDataPoint>> getHealthIntervalDataFromTypes({
    required DateTime? startDate,
    required DateTime? endDate,
    required List<_i2.HealthDataType>? types,
    required int? interval,
    bool? includeManualEntry = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthIntervalDataFromTypes,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
            #types: types,
            #interval: interval,
            #includeManualEntry: includeManualEntry,
          },
        ),
        returnValue: _i4.Future<List<_i2.HealthDataPoint>>.value(
            <_i2.HealthDataPoint>[]),
        returnValueForMissingStub: _i4.Future<List<_i2.HealthDataPoint>>.value(
            <_i2.HealthDataPoint>[]),
      ) as _i4.Future<List<_i2.HealthDataPoint>>);
  @override
  _i4.Future<List<_i2.HealthDataPoint>> getHealthAggregateDataFromTypes({
    required List<_i2.HealthDataType>? types,
    required DateTime? startDate,
    required DateTime? endDate,
    int? activitySegmentDuration = 1,
    bool? includeManualEntry = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthAggregateDataFromTypes,
          [],
          {
            #types: types,
            #startDate: startDate,
            #endDate: endDate,
            #activitySegmentDuration: activitySegmentDuration,
            #includeManualEntry: includeManualEntry,
          },
        ),
        returnValue: _i4.Future<List<_i2.HealthDataPoint>>.value(
            <_i2.HealthDataPoint>[]),
        returnValueForMissingStub: _i4.Future<List<_i2.HealthDataPoint>>.value(
            <_i2.HealthDataPoint>[]),
      ) as _i4.Future<List<_i2.HealthDataPoint>>);
  @override
  List<_i2.HealthDataPoint> removeDuplicates(
          List<_i2.HealthDataPoint>? points) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeDuplicates,
          [points],
        ),
        returnValue: <_i2.HealthDataPoint>[],
        returnValueForMissingStub: <_i2.HealthDataPoint>[],
      ) as List<_i2.HealthDataPoint>);
  @override
  _i4.Future<int?> getTotalStepsInInterval(
    DateTime? startTime,
    DateTime? endTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalStepsInInterval,
          [
            startTime,
            endTime,
          ],
        ),
        returnValue: _i4.Future<int?>.value(),
        returnValueForMissingStub: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);
  @override
  _i4.Future<bool> writeWorkoutData({
    required _i2.HealthWorkoutActivityType? activityType,
    required DateTime? start,
    required DateTime? end,
    int? totalEnergyBurned,
    _i2.HealthDataUnit? totalEnergyBurnedUnit = _i2.HealthDataUnit.KILOCALORIE,
    int? totalDistance,
    _i2.HealthDataUnit? totalDistanceUnit = _i2.HealthDataUnit.METER,
    String? title,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeWorkoutData,
          [],
          {
            #activityType: activityType,
            #start: start,
            #end: end,
            #totalEnergyBurned: totalEnergyBurned,
            #totalEnergyBurnedUnit: totalEnergyBurnedUnit,
            #totalDistance: totalDistance,
            #totalDistanceUnit: totalDistanceUnit,
            #title: title,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
